name: CI/CD for Spring Boot App

on:
  push:
    branches:
      - main

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. application.yml 파일 생성
      # resources 폴더가 이미 있다면 해당 줄은 생략 가능
      - name: Create application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml

      # 3. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 5. Docker 이미지 빌드 및 Docker Hub로 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .            # Dockerfile이 있는 디렉토리
          file: ./Dockerfile     # Dockerfile 경로
          push: true
          tags: ${{ secrets.DOCKERHUB_REPO }}

  deploy:
    runs-on: ubuntu-latest
    needs: [docker]

    steps:
      # 6. EC2 서버에 SSH로 접속하여 docker-compose를 통한 배포 수행
      - name: Deploy to Server using docker-compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # 저장소가 EC2에 클론되어 있다고 가정
            # cd /path/to/your/project
            # docker-compose.yml 파일이 있는 디렉토리로 이동 후 이미지 갱신 및 컨테이너 재시작
            sudo docker-compose pull
            sudo docker-compose down
            sudo docker-compose up -d
