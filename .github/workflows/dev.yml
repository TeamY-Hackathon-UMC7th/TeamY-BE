name: CI/CD for Spring Boot App

on:
  push:
    branches:
      - main

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

#    - name: Set up JDK 21
#      uses: actions/setup-java@v3
#      with:
#        java-version: '21' # 스프링부트 애플리케이션 자바 버전에 맞게
#        distribution: 'zulu'

    - name: make application.yml
      run: |
        mkdir ./src/main/resources # 원격에 resources 폴더가 올라가 있다면 이 줄 삭제
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.APPLICATION }}" > ./application.yml

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Build and push Docker image
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: . # Dockerfile이 있는 디렉토리
        file: ./Dockerfile  # Dockerfile 경로 지정
        push: true
        tags: ${{ secrets.DOCKERHUB_REPO }}

  deploy:
    runs-on: ubuntu-latest
    needs: [docker]

    steps:
    - name: Check GitHub Runner Public IP
      run: curl ifconfig.me

    # 6. EC2 서버에 SSH로 접속하여 docker-compose를 통한 배포 수행
    - name: Deploy to Server using docker-compose
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # 저장소가 EC2에 클론되어 있다고 가정
          # cd /path/to/your/project
          # docker-compose.yml 파일이 있는 디렉토리로 이동 후 이미지 갱신 및 컨테이너 재시작
          sudo docker-compose pull
          sudo docker-compose up -d

